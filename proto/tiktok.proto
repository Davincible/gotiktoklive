syntax = "proto3";

package TikTok;

option go_package = "./proto;gotiktoklive";

// Data structure from im/fetch/ response
message WebcastResponse {
    repeated Message messages = 1;
    string cursor = 2;
    string ackIds = 5;
    WebsocketParam wsParam = 7;
    string wsUrl = 10;
}

message Message {
    string type = 1;
    bytes binary = 2;
}

message WebsocketParam {
    string name = 1;
    string value = 2;
}

// Message types depending on Message.tyoe
message WebcastControlMessage {
    int32 action = 2;
}

// Statistics like viewer count
message WebcastRoomUserSeqMessage {
    int32 viewerCount = 3;
}

message WebcastChatMessage {
    User user = 2;
    string comment = 3;
}

message WebcastMemberMessage {
    User user = 2;
    WebcastMessageEvent event = 1;
}

message WebcastGiftMessage {
    User user = 7;

    int32 giftId = 2;
    int32 repeatCount = 5;
    int32 repeatEnd = 9;

    WebcastGiftMessageGiftDetails giftDetails = 15;
    WebcastGiftMessageGiftExtra giftExtra = 23;
}

message WebcastGiftMessageGiftExtra {
    uint64 timestamp = 6;
    uint64 to_user_id = 8;
}

message WebcastGiftMessageGiftDetails {
    WebcastGiftMessageGiftImage giftImage = 1;
    string giftName = 16;
    string describe = 2;
    int32 giftType = 11;
    int32 diamondCount = 12;
}

message WebcastGiftMessageGiftImage {
    string giftPictureUrl = 1;
}

// Battle start
message WebcastLinkMicBattle {
    repeated WebcastLinkMicBattleItems battleUsers = 10;
}

message WebcastLinkMicBattleItems {
    WebcastLinkMicBattleGroup battleGroup = 2;
} 

message WebcastLinkMicBattleGroup {
    LinkUser user = 1;
} 


// Battle status
message WebcastLinkMicArmies {
    repeated WebcastLinkMicArmiesItems battleItems = 3;
    int32 battleStatus = 7;
}

message WebcastLinkMicArmiesItems {
    uint64 hostUserId = 1;
    repeated WebcastLinkMicArmiesGroup battleGroups = 2;
} 

message WebcastLinkMicArmiesGroup {
    repeated User users = 1;
    int32 points = 2;
} 


// Follow & share event
message WebcastSocialMessage {
    User user = 2;
    WebcastMessageEvent event = 1;
}

// Like event (is only sent from time to time, not with every like)
message WebcastLikeMessage {
    User user = 5;
    WebcastMessageEvent event = 1;
    int32 likeCount = 2;
    int32 totalLikeCount = 3;
}

// New question event
message WebcastQuestionNewMessage {
    QuestionDetails questionDetails = 2;
}

message QuestionDetails {
    string questionText = 2;
    User user = 5;
}

message WebcastMessageEvent {
    WebcastMessageEventDetails eventDetails = 8;
}

// Contains UI information
message WebcastMessageEventDetails {
    string displayType = 1;
    string label = 2;
}

message User {
    uint64 userId = 1;
    string nickname = 3;
    ProfilePicture profilePicture = 9;
    UserExtraAttributes extraAttributes = 22;
    UserBadgesAttributes badge = 64;
    string uniqueId = 38;
}

message LinkUser {
    uint64 userId = 1;
    string nickname = 2;
    ProfilePicture profilePicture = 3;
    string uniqueId = 4;
}

message ProfilePicture {
    repeated string urls = 1;
}

message UserExtraAttributes {
    int32 followRole = 3;
}

message UserBadgesAttributes {
    repeated UserBadge badges = 21;
}

message UserBadge {
    string type = 2;
    string name = 3;
}


// Websocket incoming message structure
message WebcastWebsocketMessage {
    uint64 id = 2;
    string type = 7;
    bytes binary = 8;
}

// Websocket acknowledgment message
message WebcastWebsocketAck {
    uint64 id = 2;
    string type = 7;
}

message WebcastLiveIntroMessage {
    uint64 id = 2;
    string description = 4;
    User user = 5;
}

message WebcastInRoomBannerMessage {
    string json = 2;
}

message MessageType {
    string type = 1;
}

message RoomMessage {
    MessageType type = 1;
    string text = 2;
}

message WebcastWishlistUpdateMessage {
    MessageType type = 1;
    GiftUpdates gitfs = 2;
}

message GiftUpdates {
    uint64 some_int = 1;
    repeated WishListGift gifts = 2;
    // causes errors as sometimes the username is a list of ids
    // repeated GiftUser users = 3;
    uint64 count = 4;
    string msg = 5;
}

message GiftUser {
   uint64 id = 1;
   repeated string profile_picture = 3;
   string username = 4;
   uint64 unknown = 5;  // something that relates to the gifts I expect
}

message WishListGift {
    uint64 type = 1;
    uint64 id = 2;
    uint64 received_count = 3;
    uint64 goal_count = 4;
    Gift gift = 5;
}

message Gift {
    string name = 1;
    GiftImg imgs = 2;
    uint64 cost = 3;
}

message GiftImg {
   repeated string urls = 1;
   string color = 5;
}

message WebcastBottomMessage {
    MessageType type = 1;
    string text = 2;
}
